{"version":3,"sources":["../../src/controllers/sub-location.js"],"names":["SubLocation","Models","SubLocationController","getSubLocation","_req","res","find","locations","status","json","message","getOneSubLocation","search","params","searchObject","_id","name","RegExp","findOne","populate","exec","location","toJSON","getters","virtuals","addSubLocation","req","body","maleCount","femaleCount","locationId","newLocation","save","data","updateSubLocation","id","findByIdAndUpdate","identity","runValidators","deleteSubLocation","findById","remove","deletedLocation"],"mappings":"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","sourcesContent":["import { pickBy, identity } from 'lodash';\nimport Models from '../models';\nimport ErrorHandling from '../utils/error-handling';\nimport { isMongoId } from '../utils/validation';\n\nconst { SubLocation } = Models;\n\nconst SubLocationController = {\n  getSubLocation: async (_req, res) => {\n    const locations = await SubLocation.find();\n    res.status(200).json({ locations, message: 'All sub-locations' });\n  },\n  getOneSubLocation: async ({ params: { search } }, res) => {\n    const searchObject = isMongoId(search) ? { _id: search } : { name: new RegExp(search, 'i') };\n    let location = await SubLocation.findOne(searchObject)\n      .populate('locationId')\n      .exec();\n    if (location === null) { return res.status(404).json({ message: 'Sub-Location does not exist' }); }\n    location = location.toJSON({ getters: false, virtuals: false });\n    return res.status(200).json({ location, message: 'Sub-Location found' });\n  },\n  addSubLocation: async (req, res) => {\n    const {\n      name, maleCount, femaleCount, locationId,\n    } = req.body;\n    const newLocation = new SubLocation({\n      name, maleCount, femaleCount, locationId,\n    });\n    try {\n      const data = await newLocation.save();\n      return res.status(201).json({ location: data, message: 'New sub-location created' });\n    } catch (error) {\n      const message = ErrorHandling(error);\n      return res.status(500).json({ message });\n    }\n  },\n  updateSubLocation: async (req, res) => {\n    const { id } = req.params;\n    const {\n      name, maleCount, femaleCount, locationId,\n    } = req.body;\n    try {\n      const location = await SubLocation.findByIdAndUpdate(\n        id, pickBy({\n          name, maleCount, femaleCount, locationId,\n        }, identity), { new: true, runValidators: true },\n      );\n      if (location === null) { return res.status(404).json({ message: 'Sub-Location does not exist' }); }\n      return res.status(200).json({ location, message: 'Sub-Location updated' });\n    } catch (error) {\n      const message = ErrorHandling(error);\n      return res.status(500).json({ message });\n    }\n  },\n  deleteSubLocation: async (req, res) => {\n    const { id } = req.params;\n    const location = await SubLocation.findById(id);\n    try {\n      if (location == null) { return res.status(404).json({ message: 'Sub-Location does not exist' }); }\n      const deletedLocation = await location.remove();\n      return res.status(200).json({ location: deletedLocation, message: 'Sub-Location deleted' });\n    } catch (error) {\n      const message = ErrorHandling(error);\n      return res.status(500).json({ message });\n    }\n  },\n\n};\n\nexport default SubLocationController;\n"],"file":"sub-location.js"}