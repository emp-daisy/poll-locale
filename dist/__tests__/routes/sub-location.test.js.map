{"version":3,"sources":["../../../src/__tests__/routes/sub-location.test.js"],"names":["LocationSchema","mongoose","model","SubLocationSchema","describe","only","locationId","beforeAll","name","description","save","location","id","it","done","app","get","end","_err","res","expect","statusCode","toEqual","body","message","locations","length","maleCount","femaleCount","sublocation","objectContaining","post","send","set","put","remove","toObject","skip"],"mappings":"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","sourcesContent":["import request from 'supertest';\nimport mongoose from 'mongoose';\nimport app from '../../app';\n\nconst LocationSchema = mongoose.model('Location');\nconst SubLocationSchema = mongoose.model('SubLocation');\n\ndescribe.only('Sub-Location API Integration Tests', () => {\n  let locationId;\n  beforeAll(async () => {\n    const location = await new LocationSchema({\n      name: 'Lagos',\n      description: 'Ikeja',\n    }).save();\n    locationId = location.id;\n  });\n\n  describe('GET / sublocation', () => {\n    it('should get all sublocation', (done) => {\n      request(app)\n        .get('/api/sublocation/')\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(200);\n          expect(res.body.message).toEqual('All sub-locations');\n          expect(res.body.locations.length).toEqual(0);\n          expect(res.body.locations).toEqual([]);\n          done();\n        });\n    });\n  });\n\n  describe('GET / sublocation by name/id', () => {\n    it('should fail if subsublocation does not exist', (done) => {\n      request(app)\n        .get('/api/sublocation/Ikeja')\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(404);\n          expect(res.body.message).toEqual('Sub-Location does not exist');\n          done();\n        });\n    });\n\n    it('should get all sublocation', async (done) => {\n      const sublocation = await new SubLocationSchema({\n        name: 'Ikeja',\n        maleCount: 20,\n        femaleCount: 20,\n        locationId,\n      }).save();\n      request(app)\n        .get(`/api/sublocation/${sublocation.id}`)\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(200);\n          expect(res.body.message).toEqual('Sub-Location found');\n          expect.objectContaining({\n            name: 'Ikeja',\n            maleCount: 20,\n            femaleCount: 20,\n            id: sublocation.id,\n          });\n          done();\n        });\n    });\n  });\n\n  describe('POST / sublocation', () => {\n    it('should save new sublocation', (done) => {\n      request(app)\n        .post('/api/sublocation')\n        .send({\n          name: 'Ilupeju',\n          maleCount: 20,\n          femaleCount: 20,\n          locationId,\n        })\n        .set('Accept', 'application/json')\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(201);\n          expect(res.body.message).toEqual('New sub-location created');\n          expect.objectContaining({\n            name: 'Ilupeju',\n            maleCount: 20,\n            femaleCount: 20,\n            locationId,\n          });\n          done();\n        });\n    });\n\n    it('should fail if location invalid data passed', (done) => {\n      request(app)\n        .post('/api/sublocation')\n        .send({\n          name: 'Ilupeju',\n          maleCount: 20,\n          femaleCount: 20,\n        })\n        .set('Accept', 'application/json')\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(500);\n          expect(res.body.message).toEqual(['Location ID is required']);\n          done();\n        });\n    });\n\n    it('should fail if location invalid data type passed', (done) => {\n      request(app)\n        .post('/api/sublocation')\n        .send({\n          name: 'Yaba',\n          maleCount: 'two',\n          femaleCount: 20,\n          locationId,\n        })\n        .set('Accept', 'application/json')\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(500);\n          expect(res.body.message).toEqual([`Invalid value '${'two'}' passed for maleCount`]);\n          done();\n        });\n    });\n  });\n\n  describe('PUT / sublocation by id', () => {\n    let location;\n    beforeAll(async () => {\n      location = await new SubLocationSchema({\n        name: 'Magodo',\n        maleCount: 20,\n        femaleCount: 20,\n        locationId,\n      }).save();\n    });\n    it('should update location', (done) => {\n      request(app)\n        .put(`/api/sublocation/${location.id}`)\n        .send({\n          name: 'Maryland',\n        })\n        .set('Accept', 'application/json')\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(200);\n          expect(res.body.message).toEqual('Sub-Location updated');\n          expect.objectContaining({\n            name: 'Maryland',\n            maleCount: 20,\n            femaleCount: 20,\n            locationId,\n          });\n          done();\n        });\n    });\n\n    it('should fail with invalid location ID', (done) => {\n      request(app)\n        .put('/api/sublocation/32213')\n        .send({\n          name: 'xyz',\n        })\n        .set('Accept', 'application/json')\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(400);\n          expect(res.body.message).toEqual('Invalid id parameter');\n          done();\n        });\n    });\n\n    it('should fail if invalid parent location ID does not exist', async (done) => {\n      request(app)\n        .put(`/api/sublocation/${location.id}`)\n        .send({\n          name: 'Lekki',\n          locationId: location.id,\n        })\n        .set('Accept', 'application/json')\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(500);\n          expect(res.body.message).toEqual(['Location with ID does not exists!']);\n          done();\n        });\n    });\n\n    it('should fail if location ID does not exist', async (done) => {\n      await location.remove();\n      request(app)\n        .put(`/api/sublocation/${location.id}`)\n        .send({\n          name: 'Lekki',\n        })\n        .set('Accept', 'application/json')\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(404);\n          expect(res.body.message).toEqual('Sub-Location does not exist');\n          done();\n        });\n    });\n  });\n\n  describe('DELETE / sublocation by id', () => {\n    let location;\n    beforeAll(async () => {\n      location = await new SubLocationSchema({\n        name: 'Ajah',\n        maleCount: 20,\n        femaleCount: 20,\n        locationId,\n      }).save();\n      location.toObject();\n    });\n\n    it('should delete location', (done) => {\n      request(app)\n        .delete(`/api/sublocation/${location.id}`)\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(200);\n          expect(res.body.message).toEqual('Sub-Location deleted');\n          expect.objectContaining({\n            name: 'Ajah',\n            maleCount: 20,\n            femaleCount: 20,\n            locationId,\n          });\n          done();\n        });\n    });\n\n    it('should fail with invalid location ID', (done) => {\n      request(app)\n        .delete('/api/sublocation/32213')\n        .set('Accept', 'application/json')\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(400);\n          expect(res.body.message).toEqual('Invalid id parameter');\n          done();\n        });\n    });\n\n    it('should fail if location does not exist', (done) => {\n      request(app)\n        .delete(`/api/sublocation/${location.id}`)\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(404);\n          expect(res.body.message).toEqual('Sub-Location does not exist');\n          done();\n        });\n    });\n\n    it.skip('should delete location', async (done) => {\n      request(app)\n        .delete(`/api/sublocation/${location.id}`)\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(500);\n          expect(res.body.message).toEqual('Location does not exist');\n          done();\n        });\n    });\n  });\n});\n"],"file":"sub-location.test.js"}