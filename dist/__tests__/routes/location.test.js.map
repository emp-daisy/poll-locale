{"version":3,"sources":["../../../src/__tests__/routes/location.test.js"],"names":["LocationSchema","mongoose","model","SubLocationSchema","describe","it","done","app","get","end","_err","res","expect","statusCode","toEqual","body","message","locations","length","name","description","save","location","id","objectContaining","maleCount","femaleCount","subLocations","locationId","post","send","set","beforeAll","put","remove","toObject","mlocation"],"mappings":"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","sourcesContent":["import request from 'supertest';\nimport mongoose from 'mongoose';\nimport app from '../../app';\n\nconst LocationSchema = mongoose.model('Location');\nconst SubLocationSchema = mongoose.model('SubLocation');\n\ndescribe('Location API Integration Tests', () => {\n  describe('GET / location', () => {\n    it('should get all locations', (done) => {\n      request(app)\n        .get('/api/location/')\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(200);\n          expect(res.body.message).toEqual('All locations');\n          expect(res.body.locations.length).toEqual(0);\n          expect(res.body.locations).toEqual([]);\n          done();\n        });\n    });\n\n    it('should fail if location does not exist', (done) => {\n      request(app)\n        .get('/api/location/Lagoss')\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(404);\n          expect(res.body.message).toEqual('Location does not exist');\n          done();\n        });\n    });\n\n    it('should get all locations', async (done) => {\n      const location = await new LocationSchema({\n        name: 'Lagos',\n        description: 'West-side',\n      }).save();\n      request(app)\n        .get(`/api/location/${location.id}`)\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(200);\n          expect(res.body.message).toEqual('Location found');\n          expect(res.body.location).toEqual(expect.objectContaining({\n            name: 'Lagos',\n            description: 'West-side',\n            id: location.id,\n            maleCount: 0,\n            femaleCount: 0,\n            subLocations: [],\n          }));\n          done();\n        });\n    });\n\n    it('should get all locations with sublocations', async (done) => {\n      const location = await new LocationSchema({\n        name: 'Abia',\n        description: 'Eastern-side',\n      }).save();\n      await new SubLocationSchema({\n        name: 'Umuahia',\n        maleCount: 20,\n        femaleCount: 30,\n        locationId: location.id,\n      }).save();\n\n      request(app)\n        .get(`/api/location/${location.id}`)\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(200);\n          expect(res.body.message).toEqual('Location found');\n          expect(res.body.location).toEqual(expect.objectContaining({\n            name: 'Abia',\n            description: 'Eastern-side',\n            id: location.id,\n            maleCount: 20,\n            femaleCount: 30,\n          }));\n          done();\n        });\n    });\n  });\n  describe('POST / location', () => {\n    it('should save new locations', (done) => {\n      request(app)\n        .post('/api/location')\n        .send({\n          name: 'Abuja',\n          description: 'Capital',\n        })\n        .set('Accept', 'application/json')\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(201);\n          expect(res.body.message).toEqual('New location created');\n          expect(res.body.location).toEqual(expect.objectContaining({\n            name: 'Abuja',\n            description: 'Capital',\n          }));\n          done();\n        });\n    });\n\n    it('should fail if location name exists', (done) => {\n      request(app)\n        .post('/api/location')\n        .send({\n          name: 'Abuja',\n          description: 'Capital',\n        })\n        .set('Accept', 'application/json')\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(500);\n          expect(res.body.message).toEqual(['Location name already exists!']);\n          done();\n        });\n    });\n  });\n  describe('PUT / location by id', () => {\n    let location;\n    beforeAll(async () => {\n      location = await new LocationSchema({\n        name: 'Calabar',\n        description: 'Calabar',\n      }).save();\n    });\n    it('should update location', (done) => {\n      request(app)\n        .put(`/api/location/${location.id}`)\n        .send({\n          name: 'Cross River',\n        })\n        .set('Accept', 'application/json')\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(200);\n          expect(res.body.message).toEqual('Location updated');\n          expect(res.body.location).toEqual(expect.objectContaining({\n            name: 'Cross River',\n            description: 'Calabar',\n            id: location.id,\n          }));\n          done();\n        });\n    });\n\n    it('should fail with invalid location ID', (done) => {\n      request(app)\n        .put('/api/location/32213')\n        .send({\n          name: 'Cross River',\n        })\n        .set('Accept', 'application/json')\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(400);\n          expect(res.body.message).toEqual('Invalid id parameter');\n          done();\n        });\n    });\n\n    it('should fail if location name already exist', async (done) => {\n      await new LocationSchema({\n        name: 'Delta',\n        description: 'Asaba',\n      }).save();\n      request(app)\n        .put(`/api/location/${location.id}`)\n        .send({\n          name: 'Delta',\n        })\n        .set('Accept', 'application/json')\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(500);\n          expect(res.body.message).toEqual(['Location name already exists!']);\n          done();\n        });\n    });\n\n    it('should fail if location ID does not exist', async (done) => {\n      await location.remove();\n      request(app)\n        .put(`/api/location/${location.id}`)\n        .send({\n          name: 'Cross River',\n        })\n        .set('Accept', 'application/json')\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(404);\n          expect(res.body.message).toEqual('Location does not exist');\n          done();\n        });\n    });\n  });\n  describe('DELETE / location by id', () => {\n    it('should delete location', async (done) => {\n      const location = await new LocationSchema({\n        name: 'Rivers',\n        description: 'PH',\n      }).save();\n      location.toObject();\n      request(app)\n        .delete(`/api/location/${location.id}`)\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(200);\n          expect(res.body.message).toEqual('Location deleted');\n          expect(res.body.location).toEqual(expect.objectContaining({\n            name: 'Rivers',\n            description: 'PH',\n            id: location.id,\n          }));\n          done();\n        });\n    });\n\n    it('should fail with invalid location ID', (done) => {\n      request(app)\n        .delete('/api/location/32213')\n        .set('Accept', 'application/json')\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(400);\n          expect(res.body.message).toEqual('Invalid id parameter');\n          done();\n        });\n    });\n\n    it('should fail if location does not exist', async (done) => {\n      const mlocation = await new LocationSchema({\n        name: 'Kogi',\n        description: 'Lokoja',\n      }).save();\n      await mlocation.remove();\n      request(app)\n        .delete(`/api/location/${mlocation.id}`)\n        .end((_err, res) => {\n          expect(res.statusCode).toEqual(404);\n          expect(res.body.message).toEqual('Location does not exist');\n          done();\n        });\n    });\n  });\n});\n"],"file":"location.test.js"}